<?php

/**
 * Проведите рефакторинг, исправьте баги и продокументируйте в стиле PHPDoc код,
 * приведённый ниже (таблица users здесь аналогична таблице users из задачи №1).
 * Примечание: код написан исключительно в тестовых целях, это не "жизненный пример" :)
 *
 * @param string $userIds
 * @return array
 */
function load_users_data(string $userIds): array
{
    /**
     * config - функция-хелпер, которая достает значения конфигураций,
     * которые хранятся в .env файле (но не обязательно все).
     * Напрямую из файла окружения не берем, чтобы все конфиги были в одном месте, плюс кеширование.
     */
    $db = mysqli_connect(config('db.host'), config('db.user'), config('db.password'), config('db.name'));

    /**
     * Вместо n запросов - сделаем 1, чтобы сократить нагрузку на БД и ускорить запрос.
     * Также для предотвращения SQL-инъекций заэкранируем переменную $userIds.
     * Пример такого кода: $userId = '"1,2,3"); DELETE FROM users;'.
     */
    $users = mysqli_query($db, "SELECT * FROM users WHERE id IN (" . mysqli_real_escape_string($userIds) . ")")->fetch_all();

    $data = [];
    foreach ($users as $user) {
        $data[$user['id']] = $user['name'];

    }

    mysqli_close($db);

    return $data;
}

/*
 * Как правило, в $_GET['user_ids'] должна приходить строка
 * с номерами пользователей через запятую, например: 1,2,17,48
 * $data = load_users_data($_GET['user_ids']);
 * foreach ($data as $user_id=>$name) {
 *     echo "<a href=\"/show_user.php?id=$user_id\">$name</a>";
 * }
 * Плюсом будет, если укажете, какие именно уязвимости присутствуют
 * в исходном варианте (если таковые, на ваш взгляд, имеются),
 * и приведёте примеры их проявления.
 */

/**
 * XSS. Не экранированы переменные $user_id и $name, например, функцией htmlspecialchars.
 * Тем самым злоумышленник может внедрить вредоносный код, например, через форму на сайте.
 * И вредоносный код выполнится при выводе в шаблоне. Например, крадёт их куки.
 */
